根据postgres_impl.py的实现逻辑，结合MyScale特性，以下是实现MyScaleVectorStorage的步骤：

# mem1/kg/myscale_impl.py

import clickhouse_connect
from typing import List, Tuple, Any

class MyScaleVectorStorage:
    def __init__(self, host: str, port: int, username: str, password: str, database: str, table: str, vector_dim: int):
        self.client = clickhouse_connect.get_client(
            host=host,
            port=port,
            username=username,
            password=password,
            database=database
        )
        self.table = table
        self.vector_dim = vector_dim
        self._create_table()

    def _create_table(self):
        create_table_sql = f"""
        CREATE TABLE IF NOT EXISTS {self.table} (
            id String,
            embedding Array(Float32),
            metadata Map(String, String),
            CONSTRAINT vector_len CHECK length(embedding) = {self.vector_dim}
        ) ENGINE = MSTG(
            embedding TYPE cosine(float32),
            AnnParameters' "index_type=MSTG|max_degree=2000"'
        )
        """
        self.client.command(create_table_sql)

    def insert_vectors(self, ids: List[str], embeddings: List[List[float]], metadatas: List[dict]):
        data = [
            {
                "id": idx,
                "embedding": emb,
                "metadata": {k: str(v) for k, v in meta.items()}
            }
            for idx, emb, meta in zip(ids, embeddings, metadatas)
        ]
        self.client.insert(self.table, data, column_names=["id", "embedding", "metadata"])

    def search_similar(self, query_embedding: List[float], top_k: int = 5) -> List[Tuple[str, float, dict]]:
        search_sql = f"""
        SELECT 
            id, 
            metadata,
            distance(embedding, {query_embedding}) as dist
        FROM {self.table}
        ORDER BY dist ASC
        LIMIT {top_k}
        """
        result = self.client.query(search_sql)
        return [(row[0], row[2], row[1]) for row in result.result_rows]

    def close(self):
        self.client.close()

# 主要差异处理说明：
# 1. 连接方式：使用clickhouse_connect代替psycopg2
# 2. 表结构：使用MSTG引擎处理向量索引，包含类型约束和ANN参数
# 3. 数据插入：使用client.insert批量插入，自动处理Map类型
# 4. 相似度搜索：使用内置distance函数和MSTG索引优化
# 5. 类型转换：将metadata字典值强制转为String类型存储
需要安装依赖：

pip install clickhouse-connect
该实现特点：

使用MSTG引擎构建高效ANN索引
支持Map类型存储元数据
自动维度校验（CHECK约束）
支持余弦相似度计算
批量插入优化
使用时需确保MyScale集群版本≥1.4，并在查询时设置SET allow_experimental_annoy_index=1（如需要）