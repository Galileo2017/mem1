Metadata-Version: 2.2
Name: mem1
Version: 0.0.1
Summary: mem1: Towards Extremely Simple Retrieval-Augmented Generation
Home-page: https://github.com/Galileo2017/mem1
Author: Galileo2017
Classifier: Development Status :: 4 - Beta
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: numpy
Requires-Dist: accelerate
Requires-Dist: aioboto3
Requires-Dist: aiofiles
Requires-Dist: aiohttp
Requires-Dist: asyncpg
Requires-Dist: graspologic
Requires-Dist: gremlinpython
Requires-Dist: hnswlib
Requires-Dist: nano-vectordb
Requires-Dist: neo4j
Requires-Dist: networkx
Requires-Dist: numpy
Requires-Dist: ollama
Requires-Dist: openai
Requires-Dist: oracledb
Requires-Dist: psycopg-pool
Requires-Dist: psycopg[binary,pool]
Requires-Dist: pydantic
Requires-Dist: pymilvus
Requires-Dist: pymongo
Requires-Dist: pymysql
Requires-Dist: python-dotenv
Requires-Dist: pyvis
Requires-Dist: setuptools
Requires-Dist: sqlalchemy
Requires-Dist: tenacity
Requires-Dist: json_repair
Requires-Dist: rouge
Requires-Dist: nltk
Requires-Dist: tiktoken
Requires-Dist: torch
Requires-Dist: tqdm
Requires-Dist: transformers
Requires-Dist: xxhash
Dynamic: author
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# MiniRAG: Towards Extremely Simple Retrieval-Augmented Generation

![MiniRAG](https://files.mdnice.com/user/87760/ff711e74-c382-4432-bec2-e6f2aa787df1.jpg)


The Code Repository: **MiniRAG: Towards Extremely Simple Retrieval-Augmented Generation**
<br />  

[Tianyu Fan](https://tianyufan0504.github.io/), [Jingyuan Wang](), [Xubin Ren](https://ren-xubin.github.io/), [Chao Huang](https://sites.google.com/view/chaoh)* (*Correspondence)<br />  
</div>

<a href='https://arxiv.org/abs/2501.06713'><img src='https://img.shields.io/badge/arXiv-2501.06713-b31b1b'>


## üåç README Translations

[‰∏≠ÊñáËØ¥Êòé](./README_CN.md) | [Êó•Êú¨Ë™û](./README_JA.md)

## TLDR
MiniRAG is an extremely simple retrieval-augmented generation framework that enables small models to achieve good RAG performance through heterogeneous graph indexing and lightweight topology-enhanced retrieval.

## Abstract
The growing demand for efficient and lightweight Retrieval-Augmented Generation (RAG) systems has highlighted significant challenges when deploying Small Language Models (SLMs) in existing RAG frameworks. Current approaches face severe performance degradation due to SLMs' limited semantic understanding and text processing capabilities, creating barriers for widespread adoption in resource-constrained scenarios. To address these fundamental limitations, we present **MiniRAG**, a novel RAG system designed for extreme simplicity and efficiency. **MiniRAG** introduces two key technical innovations: (1) a semantic-aware heterogeneous graph indexing mechanism that combines text chunks and named entities in a unified structure, reducing reliance on complex semantic understanding, and (2) a lightweight topology-enhanced retrieval approach that leverages graph structures for efficient knowledge discovery without requiring advanced language capabilities. Our extensive experiments demonstrate that **MiniRAG** achieves comparable performance to LLM-based methods even when using SLMs while requiring only 25\% of the storage space. Additionally, we contribute a comprehensive benchmark dataset LiHua-World for evaluating lightweight RAG systems under realistic on-device scenarios with complex queries. 

## MiniRAG Framework

![MiniRAG](https://files.mdnice.com/user/87760/02baba85-fa69-4223-ac22-914fef7120ae.jpg)

MiniRAG employs a streamlined workflow built on the key components: heterogeneous graph indexing and lightweight graph-based knowledge retrieval. This architecture addresses the unique challenges faced by on-device RAG systems, optimizing for both efficiency and effectiveness.


## Install

* Install from source (Recommend)

```bash
cd MiniRAG
pip install -e .
```
* Install from PyPI (Our code is based on [LightRAG](https://github.com/HKUDS/LightRAG), so you can install it directly)

```bash
pip install lightrag-hku
```

## Quick Start
* All the code can be found in the `./reproduce`.
* Download the dataset you need.
* Put the dataset in the `./dataset` directory.
* Note: We have already put the LiHua-World dataset in `./dataset/LiHua-World/data/` as `LiHuaWorld.zip`. If you want to use other dataset, you can put it in the `./dataset/xxx`.


Then use the following bash command to index the dataset:
```bash
python ./reproduce/Step_0_index.py
python ./reproduce/Step_1_QA.py
```

Or, use the code in `./main.py` to initialize MiniRAG.

